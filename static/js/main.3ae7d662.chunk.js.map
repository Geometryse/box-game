{"version":3,"sources":["components/Game.jsx","App.js","index.js"],"names":["MainGame","props","calculateCells","max","allCells","clickedCells","Math","floor","random","i","clickedCellsCount","useState","cells","setCells","useEffect","allTrue","totalCleared","setTotalCleared","className","Object","keys","map","e","onMouseDown","value","updatedValue","clicked","setClicked","handleCellClicked","Game","seconds","setSeconds","frozeTime","setFrozeTime","myInterval","setInterval","parseFloat","toFixed","clearInterval","App","ReactDOM","render","document","getElementById"],"mappings":"gPAEA,SAASA,EAASC,GAChB,IAAMC,EAAiB,WAQrB,IAPA,IAA6BC,EAGvBC,EAAW,GACXC,GAJuBF,EAIY,EAHhCG,KAAKC,MAAMD,KAAKE,SAAWL,GAAO,GAIvCM,EAAI,EACJC,EAAoB,EACjBD,EAAI,GAAG,CACZA,IACaH,KAAKE,SACP,IAAOE,EAAoBL,GAEpCK,IACAN,EAASK,IAAK,GAGdL,EAASK,IAAK,EAGlB,OAAOL,GAET,EAA0BO,mBAAST,KAAnC,mBAAOU,EAAP,KAAcC,EAAd,KAuBA,OAbAC,qBAAU,WAGR,IAFA,IAAIC,GAAU,EACVN,EAAI,EACDA,EAAI,GACTA,KACiB,IAAbG,EAAMH,KAAcM,GAAU,GAEpC,GAAIA,EAAS,CACXF,EAASX,KACT,IAAQc,EAAkCf,EAAlCe,cACRC,EAD0ChB,EAApBgB,iBACND,EAAe,MAEhC,CAACJ,IAEF,qBAAKM,UAAU,iBAAf,SACGC,OAAOC,KAAKR,GAAOS,KAAI,SAACC,EAAGb,GAAJ,OACtB,qBACES,UAAS,eAAUN,EAAMH,EAAI,IAE7Bc,YAAa,kBA5BK,SAACC,GAGzB,IAAMC,EAAe,GACrBA,EAAaD,IAAUZ,EAAMY,GAC7BX,EAAS,2BAAKD,GAAUa,IACxB,IAAQC,EAAwBzB,EAAxByB,QAASC,EAAe1B,EAAf0B,WACZD,GAASC,GAAW,GAqBAC,CAAkBnB,EAAI,KADpCA,QAQA,SAASoB,IACtB,MAAwClB,mBAAS,GAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KACA,EAA8BN,mBAAS,GAAvC,mBAAOmB,EAAP,KAAgBC,EAAhB,KACA,EAAkCpB,mBAAS,GAA3C,mBAAOqB,EAAP,KAAkBC,EAAlB,KACA,EAA8BtB,oBAAS,GAAvC,mBAAOe,EAAP,KAAgBC,EAAhB,KAcA,OAbAb,qBAAU,WACR,GAAIY,EAAS,CACX,IAAIQ,EAAaC,aAAY,WAC3BJ,GAAYK,WAAWN,GAAW,KAAMO,QAAQ,MAC/C,IACH,OAAO,WACLC,cAAcJ,QAIpBpB,qBAAU,WACRmB,EAAaH,KACZ,CAACd,IAEF,gCACE,cAAChB,EAAD,CACEgB,aAAcA,EACdC,gBAAiBA,EACjBS,QAASA,EACTC,WAAYA,IAEbG,EAPH,IAQE,kDACoBd,EADpB,KACoCgB,EADpC,UC1ESO,MAZf,WACE,OACE,qBAAKrB,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UAEE,0CACA,cAAC,EAAD,U,MCHRsB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.3ae7d662.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./game.css\";\r\nfunction MainGame(props) {\r\n  const calculateCells = () => {\r\n    const getInitClickedCells = (max) => {\r\n      return Math.floor(Math.random() * max) + 1;\r\n    };\r\n    const allCells = {};\r\n    const clickedCells = getInitClickedCells(3);\r\n    let i = 0;\r\n    let clickedCellsCount = 0;\r\n    while (i < 9) {\r\n      i++;\r\n      const cell = Math.random();\r\n      if (cell < 0.5 && clickedCellsCount < clickedCells) {\r\n        // cell is clicked, increment and push\r\n        clickedCellsCount++;\r\n        allCells[i] = true;\r\n      } else {\r\n        // cell is not clicked\r\n        allCells[i] = false;\r\n      }\r\n    }\r\n    return allCells;\r\n  };\r\n  const [cells, setCells] = useState(calculateCells());\r\n  const handleCellClicked = (value) => {\r\n    // const cellsCopy = cells;\r\n    // cellsCopy[value] = true;\r\n    const updatedValue = {};\r\n    updatedValue[value] = !cells[value];\r\n    setCells({ ...cells, ...updatedValue });\r\n    const { clicked, setClicked } = props;\r\n    if (!clicked) setClicked(true);\r\n  };\r\n  useEffect(() => {\r\n    let allTrue = true;\r\n    let i = 0;\r\n    while (i < 9) {\r\n      i++;\r\n      if (cells[i] === false) allTrue = false;\r\n    }\r\n    if (allTrue) {\r\n      setCells(calculateCells());\r\n      const { totalCleared, setTotalCleared } = props;\r\n      setTotalCleared(totalCleared + 1);\r\n    }\r\n  }, [cells]);\r\n  return (\r\n    <div className=\"game-container\">\r\n      {Object.keys(cells).map((e, i) => (\r\n        <div\r\n          className={`cell ${cells[i + 1]}`}\r\n          key={i}\r\n          onMouseDown={() => handleCellClicked(i + 1)}\r\n        ></div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function Game() {\r\n  const [totalCleared, setTotalCleared] = useState(0);\r\n  const [seconds, setSeconds] = useState(0);\r\n  const [frozeTime, setFrozeTime] = useState(0);\r\n  const [clicked, setClicked] = useState(false);\r\n  useEffect(() => {\r\n    if (clicked) {\r\n      let myInterval = setInterval(() => {\r\n        setSeconds((parseFloat(seconds) + 0.01).toFixed(2));\r\n      }, 10);\r\n      return () => {\r\n        clearInterval(myInterval);\r\n      };\r\n    }\r\n  });\r\n  useEffect(() => {\r\n    setFrozeTime(seconds);\r\n  }, [totalCleared]);\r\n  return (\r\n    <div>\r\n      <MainGame\r\n        totalCleared={totalCleared}\r\n        setTotalCleared={setTotalCleared}\r\n        clicked={clicked}\r\n        setClicked={setClicked}\r\n      />\r\n      {seconds}s\r\n      <p>\r\n        Time to complete {totalCleared}: {frozeTime}s\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport BoxGame from \"./components/Game.jsx\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n        <h1>BOX GAME</h1>\n        <BoxGame />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}